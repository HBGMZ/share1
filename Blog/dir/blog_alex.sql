-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: localhost    Database: blog_alex
-- ------------------------------------------------------
-- Server version	5.7.17-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(30) NOT NULL,
  `desc` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `us` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `type` (`type`),
  KEY `us` (`us`),
  CONSTRAINT `article_ibfk_1` FOREIGN KEY (`type`) REFERENCES `articletype` (`id`),
  CONSTRAINT `article_ibfk_2` FOREIGN KEY (`us`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'Pyinstaller打包selenium','简介:前面打包的selenium代码，在运行的时候会出现一个Dos窗口','<p>文章来源：<a href=\"https://blog.csdn.net/La_vie_est_belle/article/details/81252588\">https://blog.csdn.net/La_vie_est_belle/article/details/81252588</a></p><p>&nbsp;</p><p>解决方案就是修改selenium包中的service.py（selenium-&gt;webdriver-&gt;common-&gt;service.py）源码。</p><p>&nbsp;</p><p>在第75行代码中，也就是下面这段代码</p><p>&nbsp;</p><pre><code>self.process = subprocess.Popen(cmd, env=self.env,\r\nclose_fds=platform.system() != \'Windows\',stdout=self.log_file,stderr=self.log_file,stdin=PIPE)</code></pre><p>&nbsp;</p><p>加上一个参数，creationflg=134217728，再次打包即可</p><p>&nbsp;</p><pre><code>self.process = subprocess.Popen(cmd, env=self.env,\r\nclose_fds=platform.system() != \'Windows\',stdout=self.log_file,stderr=self.log_file,stdin=PIPE,creationflg=134217728)</code></pre>','2019-04-22 22:28:53',1,1),(2,'编写第一个程序界面','金角大王等待唐僧的日子','<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">首先，点击工具 - 外部工具-QT Design打开设计师</font></font></p><p>&nbsp;</p><p><img alt=\"\" src=\"http://www.7z1.xyz/static/upload/201903171919515174.png\"></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">这是打开的欢迎界面的模板，根据网上查的资料，我选的是主窗口，也就是空白界面</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">至于对话和窗口小部件是什么我也没去深究</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">选好模板后就是根据自己的需求从左边的工具栏里面往界面上拖控件就行了</font></font></p><p>&nbsp;</p><p><img alt=\"\" src=\"http://www.7z1.xyz/static/upload/201903171925447738.png\"></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">这是我根据自己的需求做完的界面</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">然后就是保存了，默认是保存到程序的目录，也可以自己选，名字是以的的.ui结尾的</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">保存完之后，在pycharm右键选择*的的.ui文件，外部工具，PyUIC将其转换为PY文件</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">转换完成后代码是这样的</font></font></p><p>&nbsp;</p><pre><code>\'\'\'<font></font>\r\n# -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file \'ssc.ui\'\r\n#\r\n# Created by: PyQt5 UI code generator 5.11.3\r\n#\r\n# WARNING! All changes made in this file will be lost!\r\n\r\nfrom PyQt5 import QtCore, QtGui, QtWidgets\r\n\r\n\r\nclass Ui_MainWindow(object):\r\n    def setupUi(self, MainWindow):\r\n        MainWindow.setObjectName(\"MainWindow\")\r\n        MainWindow.resize(415, 310)\r\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\r\n        self.centralwidget.setObjectName(\"centralwidget\")\r\n        self.label = QtWidgets.QLabel(self.centralwidget)\r\n        self.label.setGeometry(QtCore.QRect(30, 20, 61, 41))\r\n        self.label.setObjectName(\"label\")\r\n        self.label_2 = QtWidgets.QLabel(self.centralwidget)\r\n        self.label_2.setGeometry(QtCore.QRect(30, 60, 61, 41))\r\n        self.label_2.setObjectName(\"label_2\")\r\n        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)\r\n        self.lineEdit.setGeometry(QtCore.QRect(70, 30, 113, 21))\r\n        self.lineEdit.setObjectName(\"lineEdit\")\r\n        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)\r\n        self.lineEdit_2.setGeometry(QtCore.QRect(70, 70, 113, 21))\r\n        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)\r\n        self.g_0 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_0.setGeometry(QtCore.QRect(70, 140, 31, 16))\r\n        self.g_0.setObjectName(\"g_0\")\r\n        self.g_1 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_1.setGeometry(QtCore.QRect(100, 140, 31, 16))\r\n        self.g_1.setObjectName(\"g_1\")\r\n        self.g_2 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_2.setGeometry(QtCore.QRect(130, 140, 31, 16))\r\n        self.g_2.setObjectName(\"g_2\")\r\n        self.g_3 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_3.setGeometry(QtCore.QRect(160, 140, 31, 16))\r\n        self.g_3.setObjectName(\"g_3\")\r\n        self.g_4 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_4.setGeometry(QtCore.QRect(190, 140, 31, 16))\r\n        self.g_4.setObjectName(\"g_4\")\r\n        self.g_5 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_5.setGeometry(QtCore.QRect(220, 140, 31, 16))\r\n        self.g_5.setObjectName(\"g_5\")\r\n        self.g_6 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_6.setGeometry(QtCore.QRect(250, 140, 31, 16))\r\n        self.g_6.setObjectName(\"g_6\")\r\n        self.g_7 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_7.setGeometry(QtCore.QRect(280, 140, 31, 16))\r\n        self.g_7.setObjectName(\"g_7\")\r\n        self.g_8 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_8.setGeometry(QtCore.QRect(310, 140, 31, 16))\r\n        self.g_8.setObjectName(\"g_8\")\r\n        self.g_9 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.g_9.setGeometry(QtCore.QRect(340, 140, 31, 16))\r\n        self.g_9.setObjectName(\"g_9\")\r\n        self.s_0 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_0.setGeometry(QtCore.QRect(70, 170, 31, 16))\r\n        self.s_0.setObjectName(\"s_0\")\r\n        self.s_1 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_1.setGeometry(QtCore.QRect(100, 170, 31, 16))\r\n        self.s_1.setObjectName(\"s_1\")\r\n        self.s_5 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_5.setGeometry(QtCore.QRect(220, 170, 31, 16))\r\n        self.s_5.setObjectName(\"s_5\")\r\n        self.s_9 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_9.setGeometry(QtCore.QRect(340, 170, 31, 16))\r\n        self.s_9.setObjectName(\"s_9\")\r\n        self.s_3 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_3.setGeometry(QtCore.QRect(160, 170, 31, 16))\r\n        self.s_3.setObjectName(\"s_3\")\r\n        self.s_6 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_6.setGeometry(QtCore.QRect(250, 170, 31, 16))\r\n        self.s_6.setObjectName(\"s_6\")\r\n        self.s_7 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_7.setGeometry(QtCore.QRect(280, 170, 31, 16))\r\n        self.s_7.setObjectName(\"s_7\")\r\n        self.s_2 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_2.setGeometry(QtCore.QRect(130, 170, 31, 16))\r\n        self.s_2.setObjectName(\"s_2\")\r\n        self.s_4 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_4.setGeometry(QtCore.QRect(190, 170, 31, 16))\r\n        self.s_4.setObjectName(\"s_4\")\r\n        self.s_8 = QtWidgets.QCheckBox(self.centralwidget)\r\n        self.s_8.setGeometry(QtCore.QRect(310, 170, 31, 16))\r\n        self.s_8.setObjectName(\"s_8\")\r\n        self.label_3 = QtWidgets.QLabel(self.centralwidget)\r\n        self.label_3.setGeometry(QtCore.QRect(30, 140, 31, 16))\r\n        self.label_3.setObjectName(\"label_3\")\r\n        self.label_4 = QtWidgets.QLabel(self.centralwidget)\r\n        self.label_4.setGeometry(QtCore.QRect(30, 170, 31, 16))\r\n        self.label_4.setObjectName(\"label_4\")\r\n        self.label_5 = QtWidgets.QLabel(self.centralwidget)\r\n        self.label_5.setGeometry(QtCore.QRect(30, 120, 54, 12))\r\n        self.label_5.setObjectName(\"label_5\")\r\n        self.pushButton = QtWidgets.QPushButton(self.centralwidget)\r\n        self.pushButton.setGeometry(QtCore.QRect(110, 220, 75, 23))\r\n        self.pushButton.setObjectName(\"pushButton\")\r\n        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)\r\n        self.pushButton_2.setGeometry(QtCore.QRect(230, 220, 75, 23))\r\n        self.pushButton_2.setObjectName(\"pushButton_2\")\r\n        self.y_2 = QtWidgets.QRadioButton(self.centralwidget)\r\n        self.y_2.setGeometry(QtCore.QRect(290, 30, 41, 16))\r\n        self.y_2.setObjectName(\"y_2\")\r\n        self.y_1 = QtWidgets.QRadioButton(self.centralwidget)\r\n        self.y_1.setGeometry(QtCore.QRect(290, 50, 41, 16))\r\n        self.y_1.setObjectName(\"y_1\")\r\n        self.j_2 = QtWidgets.QRadioButton(self.centralwidget)\r\n        self.j_2.setGeometry(QtCore.QRect(290, 70, 41, 16))\r\n        self.j_2.setObjectName(\"j_2\")\r\n        self.j_1 = QtWidgets.QRadioButton(self.centralwidget)\r\n        self.j_1.setGeometry(QtCore.QRect(340, 30, 41, 16))\r\n        self.j_1.setObjectName(\"j_1\")\r\n        self.f_2 = QtWidgets.QRadioButton(self.centralwidget)\r\n        self.f_2.setGeometry(QtCore.QRect(340, 50, 41, 16))\r\n        self.f_2.setObjectName(\"f_2\")\r\n        self.l_2 = QtWidgets.QRadioButton(self.centralwidget)\r\n        self.l_2.setGeometry(QtCore.QRect(340, 70, 41, 16))\r\n        self.l_2.setObjectName(\"l_2\")\r\n        self.label_6 = QtWidgets.QLabel(self.centralwidget)\r\n        self.label_6.setGeometry(QtCore.QRect(250, 30, 41, 16))\r\n        self.label_6.setObjectName(\"label_6\")\r\n        MainWindow.setCentralWidget(self.centralwidget)\r\n        self.menubar = QtWidgets.QMenuBar(MainWindow)\r\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 415, 23))\r\n        self.menubar.setObjectName(\"menubar\")\r\n        MainWindow.setMenuBar(self.menubar)\r\n        self.statusbar = QtWidgets.QStatusBar(MainWindow)\r\n        self.statusbar.setObjectName(\"statusbar\")\r\n        MainWindow.setStatusBar(self.statusbar)\r\n\r\n        self.retranslateUi(MainWindow)\r\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\r\n\r\n    def retranslateUi(self, MainWindow):\r\n        _translate = QtCore.QCoreApplication.translate\r\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"MainWindow\"))\r\n        self.label.setText(_translate(\"MainWindow\", \"账号：\"))\r\n        self.label_2.setText(_translate(\"MainWindow\", \"密码：\"))\r\n        self.g_0.setText(_translate(\"MainWindow\", \"0\"))\r\n        self.g_1.setText(_translate(\"MainWindow\", \"1\"))\r\n        self.g_2.setText(_translate(\"MainWindow\", \"2\"))\r\n        self.g_3.setText(_translate(\"MainWindow\", \"3\"))\r\n        self.g_4.setText(_translate(\"MainWindow\", \"4\"))\r\n        self.g_5.setText(_translate(\"MainWindow\", \"5\"))\r\n        self.g_6.setText(_translate(\"MainWindow\", \"6\"))\r\n        self.g_7.setText(_translate(\"MainWindow\", \"7\"))\r\n        self.g_8.setText(_translate(\"MainWindow\", \"8\"))\r\n        self.g_9.setText(_translate(\"MainWindow\", \"9\"))\r\n        self.s_0.setText(_translate(\"MainWindow\", \"0\"))\r\n        self.s_1.setText(_translate(\"MainWindow\", \"1\"))\r\n        self.s_5.setText(_translate(\"MainWindow\", \"5\"))\r\n        self.s_9.setText(_translate(\"MainWindow\", \"9\"))\r\n        self.s_3.setText(_translate(\"MainWindow\", \"3\"))\r\n        self.s_6.setText(_translate(\"MainWindow\", \"6\"))\r\n        self.s_7.setText(_translate(\"MainWindow\", \"7\"))\r\n        self.s_2.setText(_translate(\"MainWindow\", \"2\"))\r\n        self.s_4.setText(_translate(\"MainWindow\", \"4\"))\r\n        self.s_8.setText(_translate(\"MainWindow\", \"8\"))\r\n        self.label_3.setText(_translate(\"MainWindow\", \"个位：\"))\r\n        self.label_4.setText(_translate(\"MainWindow\", \"十位：\"))\r\n        self.label_5.setText(_translate(\"MainWindow\", \"选号：\"))\r\n        self.pushButton.setText(_translate(\"MainWindow\", \"运行\"))\r\n        self.pushButton_2.setText(_translate(\"MainWindow\", \"停止\"))\r\n        self.y_2.setText(_translate(\"MainWindow\", \"2元\"))\r\n        self.y_1.setText(_translate(\"MainWindow\", \"1元\"))\r\n        self.j_2.setText(_translate(\"MainWindow\", \"2角\"))\r\n        self.j_1.setText(_translate(\"MainWindow\", \"1角\"))\r\n        self.f_2.setText(_translate(\"MainWindow\", \"2分\"))\r\n        self.l_2.setText(_translate(\"MainWindow\", \"2厘\"))\r\n        self.label_6.setText(_translate(\"MainWindow\", \"金额：\"))</code></pre><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">&nbsp;\'\'\'</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">这个时候你运行这个文件是没用的</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">需要一个run.py来调用这个UI文件，当然名字是你自己定义</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">run.py代码</font></font></p><p>&nbsp;</p><pre><code>from PyQt5.QtWidgets import QApplication, QMainWindow\r\nfrom PyQt5.QtGui import QIcon\r\nimport threading\r\nfrom ssc import *\r\nfrom ssc2 import Ssc\r\n\r\n\r\nclass MyWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super(MyWindow, self).__init__()\r\n        self.setupUi(self)\r\n        self.initUI()\r\n        self.ssc = None\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    app = QApplication(sys.argv)\r\n    w = MyWindow()\r\n    w.show()\r\n    sys.exit(app.exec_())</code></pre><p>&nbsp;</p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">运行run.py就可以看到你刚刚写好的界面</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">但是这个时候界面是没有任何功能的</font></font></p><p>&nbsp;</p><pre><code>w.pushButton.clicked.connect(w.run)\r\nw.pushButton_2.clicked.connect(w.exit)\r\n\r\n给两个pushButton按钮添加功能函数，w.run和w.exit就是函数名\r\n\r\n不要加括号</code></pre><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">详细我就不写了，你可以在运行里面写个打印之类的，然后点击按钮就会看到输出</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">获取文本框输入</font></font></p><pre><code>self.lineEdit.text()</code></pre><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">判断单选框，多选框是否选择</font></font></p><pre><code>if self.g_0.isChecked()\r\n\r\n这个self.g_0是我自己改了projectnanme，默认的话应该是这样\r\n\r\nself.checkbox.isChecked()\r\nself.checkbox2.isChecked()</code></pre><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">退出按钮代码</font></font></p><p>&nbsp;</p><pre><code>    def exit(self):\r\n# 这里我加了一个提示框，QtWidgets的MessageBox有三个用法，一个是问号，一个是感叹号，一个是句号\r\n        reply = QtWidgets.QMessageBox.question(self,\r\n                                               \'时时彩自动下注\',\r\n                                               \"是否要退出程序？\",\r\n                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,\r\n                                               QtWidgets.QMessageBox.No)\r\n        if reply == QtWidgets.QMessageBox.Yes:\r\n            if self.ssc:\r\n                self.ssc.driver.quit()\r\n            sys.exit(app.exec_())\r\n\r\n\r\n这是另外一种用法\r\n        if not all([user, pwd, g_num, s_num, money]):\r\n            QtWidgets.QMessageBox.information(self, \'错误提示\', \"选择参数不全，请重新输入\")\r\n            return\r\n\r\n        if len(g_num) &lt; 2 or len(s_num) &lt; 2:\r\n            QtWidgets.QMessageBox.information(self, \'错误提示\', \"选号个数不能少于2个\")\r\n            return</code></pre><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">自定义程序标题和图标</font></font></p><p>&nbsp;</p><pre><code>class MyWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super(MyWindow, self).__init__()\r\n        self.setupUi(self)\r\n        self.initUI()\r\n        self.ssc = None\r\n\r\n    def initUI(self):\r\n        self.setWindowTitle(\'时时彩自动下注\')\r\n        self.setWindowIcon(QIcon(\'logo.jpg\'))  # 设置窗体标题图标\r\n        self.show()</code></pre><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">这个时候再次运行一下run.py会发现界面卡死无响应</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">查了下发现是因为我的主程序是另外一个代码块，并且是循环运行，这个时候进程就会卡在我的主程序那边</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">导致UI界面无法继续运行，怎么解决呢，另外开一个线程让主程序跑就行了，记住</font></font></p><p>&nbsp;</p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">要设置守护线程，主程序结束线程也要结束，否则的话一样会卡死</font></font></p>','2019-04-22 22:38:10',1,1),(3,'Flask设置ip黑名单','金角大王等待唐僧的日子','<p>flask登陆防止暴力破解</p><p>&nbsp;</p><p>黑名单条件：非正常浏览器用户，恶意尝试登录用户</p><p>&nbsp;</p><p>非浏览器访问，一律加入黑名单（你用了User-Agent那就放过去吧，让我分析UA判断是否真实用户？算了吧）</p><p>&nbsp;</p><p>选择一个redis数据库做缓存，缓存时间1天，mongo记录用户ip，UA，以及错误信息</p><p>&nbsp;</p><p>用户在登陆时输入错误密码则写入redis，再次输入计数+1，前端返回剩余次数，错误累计达10次，获取当前时间int(time.time())</p><p>&nbsp;</p><p>将用户ip写入black_ip.conf文件中，写入内容为deny *.*.*.*;&nbsp; #&nbsp; 记录时间：{时间戳}，记录原因：{密码错误次数过多 or 非正常访问}</p><p>&nbsp;</p><p>然后在nginx.conf 中include black_ip.conf，flask执行完写入步骤后 重启nginx&nbsp; &nbsp;os.system(\'nginx -s reload\')</p><p>&nbsp;</p><p>并且将ip，ua，错误信息等内容写入mongo，设置band值True</p><p>&nbsp;</p><p>flask设置before_request请求钩子， 在用户每次访问时获取ip，查询mongo，如果ip存在数据库中，判断band是否为True</p><p>&nbsp;</p><p>True：int(time.time()) - 数据库中的时间戳 &gt;= 60 * 60 * 24， # 记录时间超过1天，解封：改band值为False，update数据库，放行</p><p>&nbsp;</p><p>False或者不存在数据库：放行</p><p>&nbsp;</p><p>另外使用crontab执行定时python脚本，每小时运行一次，检测black_ip.conf中禁止访问的ip时间戳是否过期</p><p>&nbsp;</p><p>过期则替换字符串将其注释， 删除原文件，重新写入，重启nginx</p><p>&nbsp;</p><p>因为没有登录成功无法访问其他页面，所以也没有做其他设置，后期可以增加记录恶意访问次数黑名单处理</p><p>&nbsp;</p><p>简单防止如CC攻击等，其实nginx就可以配置访问量达到防止CC攻击了，但是这种东西防得住吗</p>','2019-04-22 22:45:57',3,1),(4,'在Python中动态创建Mongodb集合','金角大王等待唐僧的日子','<div><strong>简介</strong>最近在写爬虫程序，需要将爬取的内容，存进Mongodb数据库。但是需要在程序中根据变量动态创建集合。</div><div><h1>最近在写爬虫程序，需要将爬取的内容，存进Mongodb数据库。但是需要在程序中根据变量动态创建集合。</h1><p>&nbsp;</p><pre><code>client = MongoClient(self.uri, port=self.port)\r\ndb = client.数据库名\r\ncollection = db[\'集合名\']</code></pre><p>&nbsp;</p><p>也可以这样写</p><p>&nbsp;</p><pre><code>client = MongoClient(self.uri, port=self.port)\r\ncollection = self.client[\'数据库名\'][\'集合名\']</code></pre></div>','2019-04-22 22:47:21',3,1),(5,'Flask-SQLAlchemy','金角大王等待唐僧的日子','<p><strong>那些年我们学Flask-SQLAlchemy</strong></p><p><strong>实现数据库操作，分页等功能</strong><strong>&nbsp;</strong></p><p><strong><br></strong></p><p><br></p><p>Flask-SQLAlchemy库让flask更方便的使用SQLALchemy,是一个强大的关系形数据库框架,既可以使用orm方式操作数据库,也可以使用原始的SQL命令.</p><p>Flask-Migrate 是一个数据迁移框架,需要通过Flask-script库来操作.</p><p><br></p><p><br></p><h2>一.配置Flask-SQLAlchemy</h2><p>程序使用的数据库地址需要配置在SQLALCHEMY_DATABASE_URI中,SQLALchemy支持多种数据库,配置格式如下:</p><p>　　Postgres:</p><pre>　　postgresql://scott:tiger@localhost/mydatabase<br></pre><p>　　MySQL:</p><pre>　　mysql://scott:tiger@localhost/mydatabase<br></pre><p>　　Oracle:</p><pre>　　oracle://scott:tiger@127.0.0.1:1521/sidname<br></pre><p>　　SQLite:</p><pre>　　sqlite:////absolute/path/to/foo.db<br></pre><p>db是SQLALchemy类的实例,表示程序使用的数据库,为用户提供Flask-SQLALchemy的所有功能</p><div><pre><code>from flask import Flask\r\nfrom flask.ext.sqlalchemy import SQLAlchemy\r\n\r\napp = Flask(__name__)\r\n#配置数据库地址\r\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = \'mysql://username:password@localhost:3306/DB_name?charset=utf8\'\r\n#该配置为True,则每次请求结束都会自动commit数据库的变动\r\napp.config[\'SQLALCHEMY_COMMIT_ON_TEARDOWN\'] = True\r\ndb = SQLAlchemy(app)\r\n#也可以db = SQLAlchemy()      db.init_app(app)</code></pre><div></div></div><p><strong></strong></p><h2>二.定义模型</h2><p>Flask-SQLALchemy使用继承至db.Model的类来定义模型,如:</p><div><pre><code>class User(db.Model, UserMixin):#UserMixin是Flask-Login库中所需要的\r\n    __tablename__ = \'users\'\r\n    #每个属性定义一个字段\r\n    id = db.Column(db.Integer,primary_key=True)\r\n    username = db.Column(db.String(64),unique=True)\r\n    password = db.Column(db.String(64))\r\n\r\n    #定制显示的格式    \r\n    def __repr__(self):        \r\n        return \'&lt;User %r&gt;\' % self.username</code></pre><div></div></div><p><br></p><p><strong></strong></p><p>定义完需要在Python Shell中导入db,调用db.create_all()来创建数据库<a title=\"flask.ext.sqlalchemy.SQLAlchemy.create_all\" href=\"http://docs.jinkan.org/docs/flask-sqlalchemy/api.html#flask.ext.sqlalchemy.SQLAlchemy.create_all\" target=\"_blank\"><tt><br></tt></a></p><p>(1)常用字段选项:</p><p>　　primary_key 设置主键</p><p>　　unique 是否唯一</p><p>　　index 是否创建索引</p><p>　　nullable 是否允许为空</p><p>　　default 设置默认值,可以传入函数的引用 如传入 datetime.datetime.utcnow 则每次创建时时间都是最新时间</p><h2>三.增删查改</h2><p>(1) 插入数据:</p><div><pre><code>from app.models import User\r\nfrom app import db\r\n\r\n#创建一个新用户\r\nu = User()\r\nu.username = \'abc\'\r\nu.password = \'abc\'\r\n\r\n#将用户添加到数据库会话中\r\ndb.session.add(u)\r\n\r\n#将数据库会话中的变动提交到数据库中,如果不Commit,数据库中是没有改动的\r\ndb.session.commit()</code></pre><div></div></div><p><strong></strong>(2)查找数据:</p><div><pre><code>#返回所有用户保存到list中\r\nuser_list = User.query.all()\r\n\r\n#查找username为abc的第一个用户,返回用户实例\r\nu = User.query.filter_by(username=\'abc\').first()\r\n\r\n#模糊查找用户名以c结尾的所有用户\r\nuser_list  = User.query.filter(username.endswith(\'c\')).all()\r\n\r\n#查找用户名不是abc的用户\r\nu = User.query.filter(username != \'abc\').first()</code></pre><div></div></div><p><br></p><p>(3)删除数据:</p><div><pre><code>user = User.query.first()\r\ndb.session.delete(user)\r\ndb.session.commit()</code></pre><div></div></div><p><br></p><p>(4)修改数据:</p><div><pre><code>u = User.query.first()\r\nu.username = \'Mackie\'\r\ndb.session.commit()</code></pre><div></div></div><p><br></p><h2>四.一对多关系</h2><p>我的理解是:在多的一边定义外键,而relathonship()函数是用来建立关系的,可以只在一边定义,也可以两边都使用(只在一边使用时加上了backref选项等同于两边都使用)</p><div><pre><code>class Person(db.Model):\r\n        __tablename__ = \'persons\'\r\n        \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(50))    \r\n    #backref将在Address表中创建个名为persons的Person引用,之后可以使用address.persons         #访问这个地址的所有人\r\n    addresses = db.relationship(\'Address\', backref=\'persons\',lazy=\'dynamic\')\r\n\r\nclass Address(db.Model):\r\n        __tablename__ = \'address\'\r\n        \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    email = db.Column(db.String(50))    \r\n    #在多的一边使用db.ForeignKey声明外键\r\n    person_id = db.Column(db.Integer, db.ForeignKey(\'person.id\'))</code></pre><div></div></div><p><br></p><h2>五.多对多关系</h2><p>多对多关系可以分解为原表和关联表之间两个多对一关系,如下代码建立了学生与所选课程之间的关系:</p><div><pre><code>#创建关联表,两个字段的外键是另两个表,一个学生对应多个关联表,一个关联表对应多个课程\r\nregistrations = db.Table(\'registrations\',\r\n                         db.Column(\'student_id\',db.Integer,db.ForeignKey(\'students.id\')),\r\n                         db.Column(\'class_id\',db.Integer,db.ForeignKey(\'classes.id\'))\r\n                         )\r\n\r\nclass Student(db.Model):\r\n    __tablename__ = \'students\'\r\n    id = db.Column(db.Integer,primary_key=True,)\r\n    name = db.Column(db.String)\r\n    classes = db.relationship(\'Class\',\r\n                              secondary = registrations, #关联表,只需要在一个表建立关系,sqlalchemy会负责处理好另一个表\r\n                              backref = db.backref(\'students\',lazy=\'dynamic\'),\r\n                              lazy = \'dynamic\')\r\n\r\n\r\nclass Class(db.Model):\r\n    __tablename__ = \'classes\'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String)</code></pre><div></div></div><p><br></p><p>多对多的使用:</p><div><pre><code>#学生1增加一门选课student1.classes.append(class1)#学生1退选class1student1.classes.remove(class1)#学生1所选课程,由于指定了lazy=\'dynamic\'所以没有直接返回列表,而需要使用.all()student1.classes.all()</code></pre><div></div></div><p><br></p><h2>六.分页导航</h2><p>Flask-SQLALchemy的Pagination对象可以方便的进行分页,</p><p>对一个查询对象调用pagenate(page, per_page=20, error_out=True)函数可以得到pagination对象,第一个参数表示当前页,第二个参数代表每页显示的数量,error_out=True的情况下如果指定页没有内容将出现404错误,否则返回空的列表</p><div><pre><code>#从get方法中取得页码\r\npage = request.args.get(\'page\', 1, type = int)\r\n#获取pagination对象\r\n    pagination = Post.query.order_by(Post.timestamp.desc()).paginate(page, per_page=10, error_out = False)\r\n\r\n#pagination对象的items方法返回当前页的内容列表\r\n    posts = pagination.items</code></pre><div></div></div><p><br></p><h3><tt>pagination对象常用方法:</tt></h3><p>has_next :是否还有下一页</p><p>has_prev :是否还有上一页</p><p>items : 返回当前页的所有内容</p><p>next(error_out=False) : 返回下一页的Pagination对象</p><p>prev(error_out=False) : 返回上一页的Pagination对象</p><p>page : 当前页的页码(从1开始)</p><p>pages : 总页数</p><p>per_page : 每页显示的数量</p><p>prev_num : 上一页页码数</p><p>next_num :下一页页码数</p><p>query :返回 创建这个Pagination对象的查询对象</p><p>total :查询返回的记录总数</p><p>iter_pages(left_edge=2, left_current=2, right_current=5, right_edge=2)</p><h3>在模版中使用</h3><p>方法一：</p><div><pre><code>{% macro render_pagination(pagination, endpoint) %}\r\n  &lt;div class=pagination&gt;\r\n  {%- for page in pagination.iter_pages() %}\r\n    {% if page %}\r\n      {% if page != pagination.page %}\r\n        &lt;a href=\"{{ url_for(endpoint, page=page) }}\"&gt;{{ page }}&lt;/a&gt;\r\n      {% else %}\r\n        &lt;strong&gt;{{ page }}&lt;/strong&gt;\r\n      {% endif %}\r\n    {% else %}\r\n      &lt;span class=ellipsis&gt;…&lt;/span&gt;\r\n    {% endif %}\r\n  {%- endfor %}\r\n  &lt;/div&gt;\r\n{% endmacro %}</code></pre><div></div></div><p><br></p><p>方法二：jinjia2渲染+bootstrap模板</p><div><pre><code>&lt;!-- 创建页码--&gt;\r\n&lt;ul class=\"pagination\"&gt;\r\n{#上一页#}\r\n    {%  if pagination.has_prev  %}\r\n        &lt;li&gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=pagination.prev_num) }}\"&gt;<span title=\"«\">&amp;laquo;</span>&lt;/a&gt;&lt;/li&gt;\r\n    {% endif %}\r\n\r\n    {#页码#}\r\n    {% set page_now = pagination.page  %}\r\n    {% set page_count = pagination.pages %}\r\n    {% if pagination.pages &lt;= 5 %}\r\n        {% for p in pagination.iter_pages() %}\r\n                {% if p == pagination.page %}\r\n                  &lt;li &gt;&lt;a style=\"background-color: darkgray;opacity: 0.7;color: black\" href=\"{{ url_for(\'UserAdmin\',page=p) }}\"&gt;{{ p }}&lt;/a&gt;&lt;/li&gt;\r\n                {% else %}\r\n                    &lt;li &gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=p) }}\"&gt;{{ p }}&lt;/a&gt;&lt;/li&gt;\r\n                {% endif %}\r\n        {% endfor %}\r\n\r\n\r\n        {% else %}\r\n            {%  if page_now-2 &gt;0 %}\r\n                &lt;li&gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=page_now-2) }}\"&gt;{{ page_now-2 }}&lt;/a&gt;&lt;/li&gt;\r\n            {% endif %}\r\n            {% if  page_now-1 &gt;0  %}\r\n                &lt;li&gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=page_now-1) }}\"&gt;{{ page_now-1 }}&lt;/a&gt;&lt;/li&gt;\r\n            {% endif %}\r\n                &lt;li &gt;&lt;a style=\"background-color: darkgray;opacity: 0.7;color: black\" href=\"{{ url_for(\'UserAdmin\',page=page_now) }}\"&gt;{{ page_now }}&lt;/a&gt;&lt;/li&gt;\r\n            {% if (page_count-page_now) &gt;1  %}\r\n                &lt;li&gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=page_now+1) }}\"&gt;{{ page_now+1 }}&lt;/a&gt;&lt;/li&gt;\r\n            {% endif %}\r\n            {% if (page_count - page_now) &gt;2 %}\r\n                &lt;li&gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=page_now+1) }}\"&gt;{{ page_now+2 }}&lt;/a&gt;&lt;/li&gt;\r\n            {% endif %}\r\n    {% endif %}\r\n\r\n{#下一页#}\r\n    {%  if pagination.has_next  %}\r\n        &lt;li&gt;&lt;a href=\"{{ url_for(\'UserAdmin\',page=pagination.next_num) }}\"&gt;<span title=\"»\">&amp;raquo;</span>&lt;/a&gt;&lt;/li&gt;\r\n    {% endif %}\r\n\r\n    &lt;li&gt;&lt;span style=\"color: black\"&gt;页数 ( {{ page_now }}/{{ page_count }} )&lt;/span&gt;&lt;/li&gt;\r\n&lt;/ul&gt;</code></pre><div></div></div><p><br></p><p>效果展示：</p><p><img src=\"https://s1.51cto.com/wyfs02/M02/89/47/wKiom1gOOurSf9olAAAK6xH4iUE659.png\" title=\"分页样式1.png\" alt=\"wKiom1gOOurSf9olAAAK6xH4iUE659.png\"><br></p><p><a href=\"https://s5.51cto.com/wyfs02/M02/89/47/wKiom1gOOs-z9QPuAAAK6xH4iUE840.png\" target=\"_blank\"><img src=\"https://s5.51cto.com/wyfs02/M02/89/47/wKiom1gOOs-z9QPuAAAK6xH4iUE840.png\" title=\"分页样式1.png\" alt=\"wKiom1gOOs-z9QPuAAAK6xH4iUE840.png\"></a><img src=\"https://s5.51cto.com/wyfs02/M01/89/45/wKioL1gOOs-TWAuWAAAH7jdeSnQ274.png\" title=\"分页样式2.png\" alt=\"wKioL1gOOs-TWAuWAAAH7jdeSnQ274.png\"></p><p><strong><br></strong></p><p><strong>常见的数据类型与配置</strong></p><p><br></p><p><br></p><table><tbody><tr><td>类型名称</td><td>python类型</td><td>描述</td></tr><tr><td>Integer</td><td>int</td><td>常规×××，通常为32位</td></tr><tr><td>SmallInteger</td><td>int</td><td>短×××，通常为16位</td></tr><tr><td>BigInteger</td><td>int或long</td><td>精度不受限×××</td></tr><tr><td>Float</td><td>float</td><td>浮点数</td></tr><tr><td>Numeric</td><td>decimal.Decimal</td><td>定点数</td></tr><tr><td>String</td><td>str</td><td>可变长度字符串</td></tr><tr><td>Text</td><td>str</td><td>可变长度字符串，适合大量文本</td></tr><tr><td>Unicode</td><td>unicode</td><td><p>可变长度Unicode字符串</p></td></tr><tr><td>Boolean</td><td>bool</td><td>布尔型</td></tr></tbody></table><pre>TIMESTAMP&nbsp;&nbsp;&nbsp;&nbsp;timestamp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;日期加时间类型</pre><table><tbody><tr><td>Date</td><td>datetime.date</td><td>日期类型</td></tr><tr><td>Time</td><td>datetime.time</td><td>时间类型</td></tr><tr><td>Interval</td><td>datetime.timedelta</td><td>时间间隔</td></tr><tr><td>Enum</td><td>str</td><td>字符列表</td></tr><tr><td>PickleType</td><td>任意Python对象</td><td>自动Pickle序列化</td></tr><tr><td>LargeBinary</td><td>str</td><td>二进制</td></tr></tbody></table><p>常见的SQLALCHEMY列选项</p><table><tbody><tr><td>可选参数</td><td>描述</td></tr><tr><td>primary_key</td><td>如果设置为True，则为该列表的主键</td></tr><tr><td>unique</td><td>如果设置为True，该列不允许相同值</td></tr><tr><td>index</td><td>如果设置为True，为该列创建索引，查询效率会更高</td></tr><tr><td>nullable</td><td>如果设置为True，该列允许为空。如果设置为False，该列不允许空值</td></tr><tr><td>default</td><td>定义该列的默认值</td></tr></tbody></table><p>关系选项：</p><p><a href=\"http://p_w_picpath.codeweblog.com/upload/3/f1/3f156e9261894ff9.png\" target=\"_blank\"><img src=\"http://p_w_picpath.codeweblog.com/upload/3/f1/3f156e9261894ff9_thumb.png\" alt=\"常见的SQLALCHEMY列类型.配置选项和关系选项\" title=\"常见的SQLALCHEMY列类型.配置选项和关系选项\"></a></p>','2019-04-22 22:48:40',3,1),(6,'廖雪峰Python web实例_分页补充','金角大王等待唐僧的日子','<p>廖的教程写的非常详细了，分页功能不完整。</p><p>后端代码：</p><p>apis.py</p><p></p><pre><strong>class </strong>Page(object):\r\n    <em>\'\'\'\r\n</em><em>    Page object for display pages.\r\n</em><em>    \'\'\'\r\n</em><em>\r\n</em><em>    </em><strong>def </strong>__init__(self, item_count, page_index=1, page_size=10):\r\n        <em>\'\'\'\r\n</em><em>        Init Pagination by item_count, page_index and page_size.\r\n</em><em>\r\n</em><em>        &gt;&gt;&gt; p1 = Page(100, 1)\r\n</em><em>        &gt;&gt;&gt; p1.page_count\r\n</em><em>        10\r\n</em><em>        &gt;&gt;&gt; p1.offset\r\n</em><em>        0\r\n</em><em>        &gt;&gt;&gt; p1.limit\r\n</em><em>        10\r\n</em><em>        &gt;&gt;&gt; p2 = Page(90, 9, 10)\r\n</em><em>        &gt;&gt;&gt; p2.page_count\r\n</em><em>        9\r\n</em><em>        &gt;&gt;&gt; p2.offset\r\n</em><em>        80\r\n</em><em>        &gt;&gt;&gt; p2.limit\r\n</em><em>        10\r\n</em><em>        &gt;&gt;&gt; p3 = Page(91, 10, 10)\r\n</em><em>        &gt;&gt;&gt; p3.page_count\r\n</em><em>        10\r\n</em><em>        &gt;&gt;&gt; p3.offset\r\n</em><em>        90\r\n</em><em>        &gt;&gt;&gt; p3.limit\r\n</em><em>        10\r\n</em><em>        \'\'\'\r\n</em><em>        </em>self.item_count = item_count  <em># 数据总条数\r\n</em><em>        </em>self.page_size = page_size  <em># 每页显示条数\r\n</em><em>        </em>self.page_count = item_count // page_size + (1 <strong>if </strong>item_count % page_size &gt; 0 <strong>else </strong>0)  <em># item_count除以10+取余；总页数\r\n</em><em>        </em><strong>if </strong>(item_count == 0) <strong>or </strong>(page_index &gt; self.page_count):  <em># 当表数据为0或者page_count&lt;1；条数为0或页数为1\r\n</em><em>            </em>self.offset = 0\r\n            self.limit = 0\r\n            self.page_index = 1\r\n        <strong>else</strong>:\r\n            self.page_index = page_index  <em># 当前页数\r\n</em><em>            </em>self.offset = self.page_size * (page_index - 1)  <em># 0,10,20,30...\r\n</em><em>            </em>self.limit = self.page_size  <em># 1,2,3,4...\r\n</em><em>        </em>self.has_next = self.page_index &lt; self.page_count  <em># 如果当前页数&lt;总页数则下一页条件成立\r\n</em><em>        </em>self.has_previous = self.page_index &gt; 1  <em># 如果当前页大于1，则上一页条件成立\r\n</em><em>        </em>self.page_default = 11  <em># 默认显示分页11页\r\n</em><em>        # 如果总页数&lt;=11\r\n</em><em>        </em><strong>if </strong>self.page_count &lt;= self.page_default:\r\n            self.page_start = 1\r\n            self.page_end = self.page_count + 1\r\n            <em># self.page_range = range(1, self.page_count + 1)  # 遍历所有页数\r\n</em><em>        # 如果总页数&gt;11\r\n</em><em>        </em><strong>else</strong>:\r\n            <em># 如果当前页&lt;=5\r\n</em><em>            </em><strong>if </strong>self.page_index &lt;= int((self.page_default - 1) / 2):\r\n                self.page_start=1\r\n                self.page_end=self.page_default + 1\r\n                <em># self.page_range = range(1, self.page_default + 1)\r\n</em><em>            </em><strong>else</strong>:\r\n                <em># 如果当前页+5&gt;总页数\r\n</em><em>                </em><strong>if </strong>(self.page_index + 5) &gt; self.page_count:\r\n                    self.page_start = self.page_count - self.page_default + 1\r\n                    self.page_end = self.page_count + 1\r\n                    <em># self.page_range = range(self.page_count - self.page_default + 1, self.page_count + 1)\r\n</em><em>                </em><strong>else</strong>:\r\n                    self.page_start = self.page_index - int((self.page_default - 1) / 2)\r\n                    self.page_end = self.page_index + int((self.page_default - 1) / 2) + 1\r\n                    <em># self.page_range = range(self.page_index - int((self.page_default - 1) / 2),\r\n</em><em>                    #                         self.page_index + int((self.page_default - 1) / 2) + 1)\r\n</em><em>\r\n</em><em>    </em><strong>def </strong>__str__(self):\r\n        <strong>return </strong><strong>\'item_count: %s, page_count: %s, page_index: %s, page_size: %s, offset: %s, limit: %s\' </strong>% (\r\n            self.item_count, self.page_count, self.page_index, self.page_size, self.offset, self.limit)\r\n\r\n    __repr__ = __str__</pre><pre></pre><pre>前端代码：</pre><p>__base__.html</p><p></p><pre><em>{% macro pagination(url, page) %}\r\n</em><em>    &lt;ul&gt;\r\n</em><em>        {% if page.has_previous %}\r\n</em><em>            &lt;li&gt;&lt;a href=\"{{ url }}{{ page.page_index - 1 }}\"&gt;&lt;i&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;\r\n</em><em>        {% else %}\r\n</em><em>            &lt;li&gt;&lt;span&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;\r\n</em><em>        {% endif %}\r\n</em><em>        {% for i in range(page_start,page_end) %}\r\n</em><em>            {% if i == page.page_index %}\r\n</em><em>                &lt;li&gt;&lt;span&gt;{{ i }}&lt;/span&gt;&lt;/li&gt;\r\n</em><em>              {% else %}\r\n</em><em>                &lt;li&gt;&lt;a href=\"{{ url }}{{ i }}\"&gt;&lt;span&gt;{{ i }}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\r\n</em><em>            {% endif %}\r\n</em><em>        {% endfor %}\r\n</em><em>        {% if page.has_next %}\r\n</em><em>            &lt;li&gt;&lt;a href=\"{{ url }}{{ page.page_index + 1 }}\"&gt;&lt;i&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;\r\n</em><em>        {% else %}\r\n</em><em>            &lt;li&gt;&lt;span&gt;&lt;i&gt;&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;\r\n</em><em>        {% endif %}\r\n</em><em>    &lt;/ul&gt;\r\n</em><em>{% endmacro %}</em></pre><p><br></p><p>apis.py中如果用page_range会报错&nbsp;</p><h1><a href=\"https://stackoverflow.com/questions/32419433/attributeerror-datetime-date-object-has-no-attribute-dict\" rel=\"nofollow\" target=\"_blank\">AttributeError: range object has no Attribute \'__dict__\'</a></h1><div>直接在jinjia2前端中使用range即可；</div><p><br></p><p>参考链接</p><p>https://www.cnblogs.com/haiyan123/p/8228447.html<br></p><p>我的博客：http://118.24.159.163/</p>','2019-04-22 22:49:51',3,1),(7,'asyncio：高性能异步模块使用介绍','金角大王等待唐僧的日子','<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">Asyncio允许您轻松地编写利用协程的单线程并发程序，这些协程就像一个个被剥离的线程，并不会出现像使用线程时会遇到问题（要记住保留锁保护程序中的重要部分，要防止多步操作在执行的过程中中断，要防止数据处于无效状态）。</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">ASYNCIO还做了很好的工作，将我们从I / O多路复用访问的复杂性抽象出来，它还是程序线程安全的，因为在任意时刻只有一个协程运行。</font></font></p><h3><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">入门</font></font></h3><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">为了使用ASYNCIO，我们需要了解一下事件循环和协程。所有基于异步的系统都需要一个事件循环，事件循环调度我们的异步子程序并分配不同任务的执行。协程本质上是传统的线程的轻量级版本，它与线程非常相似，通过使用协程，我们基本上可以自己编写异步程序。</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">对于不太了解同步异步的同学在这里略作解释</font><font style=\"vertical-align: inherit;\">（已经知道的可以直接看示例）：</font></font><br><br><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">同步阻塞，就好比火车站过安检，需要你耗费几分钟时间，都检查完了再进站，每个人都要耽误几分钟。</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">同步非阻塞，我们假设火车站提供了一种服务名叫“反馈”，你交10块钱就可以加一个微信号，然后你把车票，身份证，行李一次性放到一个地方，同时人家还保存了一下你的美照（这一系列操作后面统称“打包”），这样你可以直接进站买点东西呀上个厕所呀（后面统称“闲逛”），再通过微信不断询问我的票检查好了吗？查好了吗？直到那头回复你说“好了”，你到指定地点去把你刚才打的包取回（后面统称“取包”），结束。</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">异步阻塞，你交20块钱买了“反馈2.0”  - 检查完毕人家会主动发微信告诉你，不需要你在不断询问了，而你“打包”完毕，还在检票口傻等，直到人家说“好了”，你在“取包”。这其实没有任何意义，因为你还是在等待，真正有意义的是异步非阻塞。</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">异步非阻塞，你交20块钱买了“反馈2.0”，“打包”完毕“闲逛”，直到人家说“好了”，然后你“取包”。这才是真正把你解放了，既不用等着，也不用不断询问。而本文的ASYNCIO用的就是异步非阻塞的协程。</font></font></p><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">我们可以定义一个事件循环，用于执行一个简单的协程。</font></font></p><p>示例 1</p><p>&nbsp;</p><pre><code>import asyncio\r\n\r\nasync def MyCoroutine():  # 一个简单的协程\r\n    print(\"Hello, world!\")\r\n\r\ndef main():\r\n    # 事件循环\r\n    loop = asyncio.get_event_loop()\r\n    # 运行事件循环，直到分配的所有任务已经完成\r\n    loop.run_until_complete(MyCoroutine())\r\n    loop.close()\r\n\r\nif __name__ == \'__main__\':\r\n    main()</code></pre><p>&nbsp;</p><p>&nbsp;</p><p>示例1 能够成功运行，可是它并没有带来什么好处，因为本例的目的在于让大家明白事件循环和协程的使用方式。在更复杂的场景中，我们才真正看到它在性能上的好处。</p><p>示例2</p><pre><code>import asyncio\r\n\r\nasync def MyCoroutine(future):\r\n    # 使用asyncio.sleep模拟一些耗时的操作（一般是一些IO操作，例如网络请求，文件读取（就是“过安检”这个动作））\r\n    await asyncio.sleep(1)\r\n    # 设定future对象的返回结果\r\n    future.set_result(\"myfuture 已执行\")\r\n\r\nasync def main():\r\n    # 定义一个future对象，asyncio.Future的实例表示将来要完成的任务\r\n    future = asyncio.Future()\r\n    # ensure_future方法 接收协程或者future作为参数，作用是排定他们的执行时间。\r\n    await asyncio.ensure_future(MyCoroutine(future))\r\n    # future.result()返回可调用对象的结果，或者重新抛出执行可调用的对象时抛出的异常。\r\n    print(future.result())\r\n\r\n# 将main加入事件循环\r\nloop = asyncio.get_event_loop()\r\ntry:\r\n    loop.run_until_complete(main())\r\nfinally:\r\n    loop.close()</code></pre><p>&nbsp;</p><p>&nbsp;</p><p>示例2 对一些方法进行了介绍，为我们使用asyncio提升性能做一些铺垫。这里涉及到了一个future的概念：future对象表示将来发生的事。可以对比期权、期房来理解。</p><p>现在让我们尝试用asyncio同时运行多个协程。这将让你体会asyncio的强大，以及如何使用它来有效地创建一个在单个线程上运行的性能难以置信的Python程序。</p><p>示例3</p><p>&nbsp;</p><pre><code>import asyncio\r\nimport random\r\n\r\nasync def MyCoroutine(id):\r\n    process_time = random.randint(1, 5)\r\n    await asyncio.sleep(process_time)\r\n    print(\"协程: {}, 执行完毕。用时： {} 秒\".format(id, process_time))\r\n\r\nasync def main():\r\n    tasks = [asyncio.ensure_future(MyCoroutine(i)) for i in range(10)]\r\n    await asyncio.gather(*tasks)\r\n\r\nloop = asyncio.get_event_loop()\r\ntry:\r\n    loop.run_until_complete(main())\r\nfinally:\r\n    loop.close()</code></pre><p>&nbsp;</p><p>&nbsp;</p><p>为了便于阅读,示例3没有进行注释。首先创建一个协程，它以ID为参数，生成一个名为process_time的1-5的随机整数，并等待该时间长度，最后它会打印出它的ID以及它等待了多长时间。然后我们生成了10个不同的任务，最后在事件循环里运行这些任务。<br>输出：</p><p>&nbsp;</p><pre><code>协程: 2, 执行完毕。用时： 1 秒\r\n协程: 5, 执行完毕。用时： 1 秒\r\n协程: 3, 执行完毕。用时： 1 秒\r\n协程: 9, 执行完毕。用时： 2 秒\r\n协程: 1, 执行完毕。用时： 3 秒\r\n协程: 8, 执行完毕。用时： 3 秒\r\n协程: 7, 执行完毕。用时： 3 秒\r\n协程: 0, 执行完毕。用时： 4 秒\r\n协程: 6, 执行完毕。用时： 4 秒\r\n协程: 4, 执行完毕。用时： 5 秒</code></pre><p>&nbsp;</p><p>&nbsp;</p><p>从输出结果可以看出两点：1.协程并没有按照顺序返回结果；2.批量运行的任务所用的时间和所有任务中用时最长的相同。这就好比做饭的时候，先蒸米饭用时15分钟，在蒸米饭期间又炒了两个菜（当然不是一个人在炒），一个用了8分钟一个用了12分钟，所以先上的是用了8分钟的菜，然后是12分钟的，最后才是米饭。并且最后总用时是15分钟，而不是35分钟。这就是异步带来的效率提升！如果你觉得提升并不明显，不妨把任务数提升到100或者1000……</p><p>另外，示例中我们使用的是ensure_future和gather，相对应的还有create_task和wait，也能起到类似的作用。<br><br>ensure_future接收的参数是协程或者future对象，create_task接收的参数只能是协程。<br><br>asyncio.gather 接收的参数是协程或者future对象，返回所有传入协程或者future的结果集。asyncio.wait 只接收future对象，返回两组future对象（已完成和等待），它有个timeout参数可用于控制返回之前等待的最大秒数，还有个return_when参数可以控制在什么情况下让函数返回。</p><p>&nbsp;</p><h3>应用</h3><p>现在的asyncio，已经有了很多的模块在支持：aiohttp,aiopg,aioredis等等, 可以在这里查看： https://github.com/aio-libs 。下面我们来了解其中一个模块aiofiles的使用。</p><p>示例4</p><p>&nbsp;</p><pre><code>import asyncio\r\nimport aiofiles\r\n\r\nasync def myopen():\r\n    async with aiofiles.open(\'333.log\', encoding=\'utf8\') as file:\r\n        contents = await file.read()\r\n    print(\'my read done, file size is {}\'.format(len(contents)))\r\n\r\nasync def test_read():\r\n    print(\'begin readfile\')\r\n    await myopen()\r\n    print(\'end readfile\')\r\n\r\nasync def test_cumpute(x, y):\r\n    print(\"begin cumpute\")\r\n    await asyncio.sleep(0.2)\r\n    print(\'end cumpute\')\r\n    return x + y\r\n\r\nloop = asyncio.get_event_loop()\r\nto_do = [asyncio.ensure_future(test_read()), asyncio.ensure_future(test_cumpute(1, 5))]\r\nloop.run_until_complete(asyncio.wait(to_do))\r\nloop.close()</code></pre><p>&nbsp;</p><p>&nbsp;</p><p>仔细观察示例4的代码我们应该能够猜出输出的顺序是什么：由于事件循环里test_read先加入，test_cumpute后加入，所以代码一运行必然先输出begin readfile和begin cumpute，然后看这两个谁的执行时间更短，如果test_cumpute执行时间更短那么就先输出end cumpute，反之则最后输出end cumpute。由于本例的目的是要模拟在进行一个长时间阻塞任务的同时，做一些其他事，所以文件要稍微大一些，在读取文件期间做一个计算。笔者测试用的文件‘333.log’有160M，输出如下：</p><p>&nbsp;</p><pre><code>begin readfile\r\nbegin cumpute\r\nend cumpute\r\nmy read done, file size is 162538819\r\nend readfile</code></pre><p>&nbsp;</p><p>由此可见，在读取文件的过程中计算已经完成。美中不足的是我们并没有获取到test_cumpute计算的结果，如何获取计算结果呢？ 请看代码：<br>示例5</p><pre>&nbsp;</pre><pre><code>import asyncio\r\nimport aiofiles\r\n\r\nasync def myopen():\r\n    async with aiofiles.open(\'333.log\', encoding=\'utf8\') as file:\r\n        contents = await file.read()\r\n    print(\'my read done, file size is {}\'.format(len(contents)))\r\n\r\nasync def test_read():\r\n    print(\'begin readfile\')\r\n    await myopen()\r\n    print(\'end readfile\')\r\n\r\nasync def test_cumpute(x, y):\r\n    print(\"begin cumpute\")\r\n    await asyncio.sleep(0.2)\r\n    print(\'end cumpute\')\r\n    return x + y\r\n\r\ndef got_result(future):\r\n    print(\'The result is \', future.result())\r\n\r\nloop = asyncio.get_event_loop()\r\nto_do = [asyncio.ensure_future(test_read()), asyncio.ensure_future(test_cumpute(1, 5))]\r\nto_do[1].add_done_callback(got_result)\r\nloop.run_until_complete(asyncio.wait(to_do))\r\nloop.close()</code></pre><p>&nbsp;</p><p>示例5比示例4只多了如下两句：</p><pre><code>def got_result(future):\r\n    print(\'The result is \', future.result())\r\n\r\nto_do[1].add_done_callback(got_result)</code></pre><p>&nbsp;</p><p>示例5引出了add_done_callback，通过add_done_callback方法给test_compute加一个回调函数get_result，而get_result函数中通过future.result方法获取协程的返回值。</p><h3>总结</h3><p>asyncio使用了与以往python用法完全不同的构造：事件循环、协程和futures。这给我们的日常学习和使用增加了难度，但是由于协程提供了相较于线程更加安全的使用方式和并不逊色的性能，使得asyncio的应用前景非常广阔（本文中提到了很多的模块已经在支持asyncio），喜欢python的你，怎么能不认真学习一下呢？</p><p>最后，提供一个用Python和aiohttp创建RESTful API的小例子：</p><p>示例6</p><pre><code>from aiohttp import web\r\nimport json\r\n\r\nasync def handle(request):\r\n    response_obj = {\'status\': \'success\'}\r\n    return web.Response(text=json.dumps(response_obj))\r\n\r\nasync def new_user(request):\r\n    try:\r\n        # 获取url中的name值\r\n        user = request.query[\'name\']\r\n        # 模拟创建了一个用户\r\n        print(\"Creating new user with name: \", user)\r\n        # 状态为200时返回的内容\r\n        response_obj = {\'status\': \'success\'}\r\n        return web.Response(text=json.dumps(response_obj), status=200)\r\n    except Exception as e:\r\n        response_obj = {\'status\': \'failed\', \'reason\': str(e)}\r\n        return web.Response(text=json.dumps(response_obj), status=500)\r\n\r\napp = web.Application()\r\n# 添加路由\r\napp.router.add_get(\'/\', handle)\r\napp.router.add_get(\'/user\', new_user)\r\n\r\nweb.run_app(app)</code></pre><p>&nbsp;</p><p>运行代码，在浏览器中输入： http://localhost:8080/ 页面可以看到如下输出表示成功：</p><pre>&nbsp;</pre><pre><code>{\"status\": \"success\"}\r\n</code></pre><p>&nbsp;</p><p>输入： http://localhost:8080/user?name=admin 后台可以看到：</p><pre>&nbsp;</pre><p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"></font></font></p><pre><code>======== Running on http://0.0.0.0:8080 ========\r\n(Press CTRL+C to quit)\r\nCreating new user with name:  admin</code></pre>','2019-04-23 00:20:49',3,2),(8,'11111','金角大王等待唐僧的日子','<p><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">HFfjodsfjalsfdvnxmlsafjkdsjkdvmcxmvcbvkdjfksdhgk</font></font></font></font></p><p><br></p>','2019-04-23 21:35:50',1,1);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `articletype`
--

DROP TABLE IF EXISTS `articletype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articletype` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `at_name` varchar(10) NOT NULL,
  `us` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `at_name` (`at_name`),
  KEY `us` (`us`),
  CONSTRAINT `articletype_ibfk_1` FOREIGN KEY (`us`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articletype`
--

LOCK TABLES `articletype` WRITE;
/*!40000 ALTER TABLE `articletype` DISABLE KEYS */;
INSERT INTO `articletype` VALUES (1,'python',1),(2,'django',1),(3,'flask',1),(4,'Torando',1),(5,'爬虫',1),(6,'内网渗透',1),(7,'Linux',1),(8,'git版本控制',1),(9,'网络攻防',1),(10,'Web渗透',1),(11,'灰盒',1);
/*!40000 ALTER TABLE `articletype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(10) NOT NULL,
  `password` varchar(255) NOT NULL,
  `is_delete` tinyint(1) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'admin','pbkdf2:sha256:150000$Shyc4fOg$f8e6326df39ed835f9f67485e11c30a3cbc80f0f9b5cef901445c94b6b429670',0,'2019-04-22 21:18:21'),(2,'abc','pbkdf2:sha256:150000$3elyJekz$3d4eb11e86ff6610c9c4f0ffca67447529745424d4e00d86918f0a9d159947f7',0,'2019-04-22 21:18:21');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-04-26 15:48:14
